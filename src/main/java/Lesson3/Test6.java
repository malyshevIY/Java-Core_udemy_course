package Lesson3;
/*
  Операторы сравнения: >, >=, <, <=, ==, != - при вызове возвращают true или false

  Логические операторы: AND(&&) - Short circuit операция, OR(||) - Short circuit операция, AND ($), OR (|), ^
  и ! - логическое И(AND) и логическое ИЛИ(OR)

  При использовании логического оператора AND - true будет возвращаться только тогда, когда
  все переменные, которые объединяет оператор AND в выражении, имеют значение true. В любых других случаях - false

  При использовании логического оператора OR - true будет возвращаться тогда, когда
  хотя бы одна переменная, которые объединяет оператор OR в выражении, имеет значение true.
  Если все выражение ложные, то будет - false

  Short circuit операции - прекращают свое действие, когда заранее известен результат всего выражения
  для && - если хотя бы одно выражение равно false - то все остальные операции в выражении не выполняются
  для || - если хотя бы одно выражение равно true - то все остальные операции в выражении не выполняются

  Если мы хотим, чтобы выполнялось все выражение в не зависимости от конечного результата, то стоит использовать
  betwice операторы (& и |) - по смыслу аналогичные && и ||, но только при выражение будет пройдено полностью

  Так же операторы (& и |) могут работать и с числовыми типами данных:
  так если операторы (&& и ||) нельзя использовать для вывода чисел, например 5 && 10, но
  (& и |) можно - будет выведено число в 2-й системе счисления:
  int a = 10; b = 5; (в 2-й системе 10 - это 1010, а 5 - это 0101 при использовании оператора & будет происходить
  сравнение по каждому элементу числа по правилам & - где 0 - false, а 1 - true - результат 0,
  при использовании оператора | тоже самое - в результате получится 1111 - что в переводе в 10-ю систему = 15)

  Оператор ^ (beTwiceExclusiveOr) - возвращает true тогда и только тогда, когда одна операнда всего выражения true,
  во всех остальных случаях вернет false

  ! - принимает противоположное значение

 */


public class Test6 {
  public static void main(String[] args) {

    int a = 3;
    int b = 2;
    int c = 5;

    boolean b1 = a > b;
    boolean b2 = b <= c;
    boolean b3 = c != b;

    boolean x = true;
    boolean y = false;
    boolean z = true;
    boolean result = x && y && z;

    System.out.println(result);

    System.out.println(b3);
  }
}
